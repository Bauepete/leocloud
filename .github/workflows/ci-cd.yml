# This workflow will build a Java project with Maven
# For more information see: https://aberger.at/blog/2021/05/29/cloud-startproject.html

name: Build Application (master)

on:
  push:
    branches: [ master, develop ]
    
  workflow_dispatch:
    inputs:
      debug:
        description: enable tmate console debugging     
        required: false
        default: "disabled"
       
env:
  REGISTRY: ghcr.io
  DISTRIBUTION_FOLDER: target/distribution-0.0.1-dist/docker
  GRAAL_VM_URL: https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-21.3.0/graalvm-ce-java17-linux-amd64-21.3.0.tar.gz

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: convert github repository name to lowercase in order to get valid docker image identifiers
      run: echo "IMAGE_REPOSITORY=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

#   We install the ssh key on log into registry now to detect problems with secrets early (before build)
    - name: install ssh key
      uses: caberger/install-ssh-key@v1.0
      with:
        ssh-private-key:  ${{ secrets.SSH_SERVER_PRIVATE_KEY }}
        user: ${{ secrets.SERVER_USER }}
        server: ${{ secrets.SERVER }}
        alias: server

    - name: shutdown the app on the server early if it is already running.
      run: |
        ssh server "(pushd /usr/local/bin/application && docker-compose down)&"

    - name: Log in to the Container registry
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.REGISTRY_ACCESS_TOKEN }}

    - name: install graal vm
      run: |
        curl --location --output graalvm.tgz ${{ env.GRAAL_VM_URL }}
        pwd
        ls -l
        tar -xzf graalvm.tgz
        mv graalvm-* graalvm
        echo "GRAAL_HOME=/usr/local/bin/graalvm/bin" >> $GITHUB_ENV
      working-directory: /usr/local/bin

    - name: Setup tmate session (for debugging only)
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug == 'enabled' }}

    - uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '17'

    - uses: actions/checkout@v2

    - name: cache maven repository
      uses: actions/cache@v2
      with:
        path: |
          ~/.m2
        key: ${{ runner.os }}-build-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-build-m2-

    - name: install nodejs
      uses: actions/setup-node@v2
      with:
        node-version: '14'
    - name: install node dependencies
      run: npm install
      working-directory: www

    - name: build web application
      run: npm run build.quarkus
      working-directory: www

    - name: build with Maven
      run: |
        mvn -Pnative -Dquarkus-profile=prod -Dbase.href="/" -B package

    - name: build docker images
      run: |
        ./build.sh build ${{ env.REGISTRY }}/${{ github.repository }}
        docker image ls
      working-directory: distribution/${{ env.DISTRIBUTION_FOLDER }}        

    - name: push docker images
      run: ./build.sh push ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }}
      working-directory: distribution/${{ env.DISTRIBUTION_FOLDER }}    

    - name: install on server  
      working-directory: distribution
      run: |
        pwd
        ls -l
        ssh server "rm -rf ~/dist && mkdir -p ~/dist"
        scp install.sh server:~/dist
        scp ${{ env.DISTRIBUTION_FOLDER }}/docker-compose-production.yml server:~/dist/docker-compose.yml
        ssh server "chmod +x ~/dist/*.sh"
        ssh server "cd ~/dist && sudo ./install.sh ${{ github.actor }} ${{ secrets.REGISTRY_ACCESS_TOKEN }} ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }} ${{ secrets.SERVER_USER }}"

